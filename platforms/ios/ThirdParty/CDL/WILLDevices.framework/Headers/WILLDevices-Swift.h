// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
@import CoreBluetooth;
@import WILLDevicesCore;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WILLDevices",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, DeviceBatteryState) {
  DeviceBatteryStateNotCharging = 0,
  DeviceBatteryStateCharging = 1,
};

/// Specifies the different actions that a user may be expected to perform during the communication with a digital ink device
/// <ul>
///   <li>
///     notConnected: The device is not connected to the system
///   </li>
///   <li>
///     idle: No action is required by the user. Device is connected.
///   </li>
///   <li>
///     syncing: The device is syncing data and no action is required by the user
///   </li>
///   <li>
///     connecting: The device is perfomring a connection
///   </li>
///   <li>
///     expectingButtonTapToConfirmConnection: The user is expected to to tap the central button of the device in order to confirm a new connection
///   </li>
///   <li>
///     expectingButtonTapToReconnect: The user is expected to tap tge central button in of the device in order to restore an existing connection
///   </li>
///   <li>
///     holdButtonToEnterUserConfirmationMode: The user is expected to press and hold the central button of the device in order to put the device into “user confirmation” mode
///   </li>
///   <li>
///     acknowledgeConnectionCofirmationTimeout: The user has to acknowledge that the “user confirmation” perfios has expired and the connection has not been confirmed
///   </li>
///   <li>
///     failedToConnect: The device has failed to perform a BTLE connect requesh
///   </li>
///   <li>
///     failedToPair: The device has failed to perform a BTLE pairing request
///   </li>
///   <li>
///     failedToAuthorize: The device failed to perform a BTLE authorization request
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DeviceStatus) {
  DeviceStatusNotConnected = 0,
  DeviceStatusIdle = 1,
  DeviceStatusSyncing = 2,
  DeviceStatusConnecting = 3,
  DeviceStatusExpectingButtonTapToConfirmConnection = 4,
  DeviceStatusExpectingButtonTapToReconnect = 5,
  DeviceStatusHoldButtonToEnterUserConfirmationMode = 6,
  DeviceStatusAcknowledgeConnectionCofirmationTimeout = 7,
  DeviceStatusFailedToConnect = 8,
  DeviceStatusFailedToPair = 9,
  DeviceStatusFailedToAuthorize = 10,
  DeviceStatusBusy = 11,
};

/// Defines an ink input device type
/// <ul>
///   <li>
///     bambooSpark: Wacom Bamboo Spark smart pad
///   </li>
///   <li>
///     bambooSlateOrFolio: Wacom Bamboo slate or folio smart pad
///   </li>
///   <li>
///     intousPaper: Wacom Intous Pro - Paper Edition
///   </li>
///   <li>
///     bambooPro: Wacom Bamboo pro
///   </li>
///   <li>
///     clipboardPHU111: Wacom Clipboard PHU-111
///   </li>
///   <li>
///     applePencil: Apple Pencil
///   </li>
///   <li>
///     creativeStylus: Wacom Creative Stylus
///   </li>
///   <li>
///     creaticeStylus2: Wacom Creative Stlus Two
///   </li>
///   <li>
///     bambooFineline: Wacom Bamboo Fineline
///   </li>
///   <li>
///     bambooFineline2: Wacom Bamboo Fineline 2
///   </li>
///   <li>
///     bambooFineline3: Wacom Bamboo Fineline 3
///   </li>
///   <li>
///     bambooSketch: Wacom Bamboo Sketch
///   </li>
///   <li>
///     unknown: Unknown Device
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DeviceType) {
  DeviceTypeBambooSpark = 0,
  DeviceTypeBambooSlateOrFolio = 1,
  DeviceTypeIntousPaper = 2,
  DeviceTypeBambooPro = 3,
  DeviceTypeClipboardPHU111 = 4,
  DeviceTypeApplePencil = 5,
  DeviceTypeCreativeStylus = 6,
  DeviceTypeCreativeStylus2 = 7,
  DeviceTypeBambooFineline = 8,
  DeviceTypeBambooFineline2 = 9,
  DeviceTypeBambooFineline3 = 10,
  DeviceTypeBambooSketch = 11,
  DeviceTypeUnknown = 12,
};

@protocol FileDataReceiver;

/// Describes someting that generates or provides file data
SWIFT_PROTOCOL("_TtP11WILLDevices16FileDataProvider_")
@protocol FileDataProvider
/// The delegate that will receive the stroke data produced by this provider
@property (nonatomic, strong) id <FileDataReceiver> _Nullable dataReceiver;
@end

@class InkDocument;
enum FileDataReceiverStatus : NSInteger;

/// Delegate definition to receive file data
SWIFT_PROTOCOL("_TtP11WILLDevices16FileDataReceiver_")
@protocol FileDataReceiver
/// When the file transfer service is started, the file data will be provided to this delegate method
/// \param fileData The file data
///
///
/// returns:
/// The return status should tell the file provided what to do (e.g. continue, cancel or resend last file)
- (enum FileDataReceiverStatus)receiveFileWithFileData:(InkDocument * _Nonnull)fileData SWIFT_WARN_UNUSED_RESULT;
/// This is called when there are no more files available for download from the device
- (void)noMoreFiles;
/// An error occurred during file download
/// \param error The error state that occured during download
///
- (void)errorWhileDownloadingFile:(NSError * _Nonnull)error;
@end

/// Enum that describes the action the FileDataProvider should take in response
/// to the delegates data processing
/// <ul>
///   <li>
///     resendLast: Resend the last sent file
///   </li>
///   <li>
///     cancel: Cancel the file sending process
///   </li>
///   <li>
///     fileSaved: The send file has been saved. Delete the file from the device and send the next
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, FileDataReceiverStatus) {
  FileDataReceiverStatusResendLast = 0,
  FileDataReceiverStatusCancel = 1,
  FileDataReceiverStatusFileSaved = 2,
};


/// Represents a service that is provided by an ink device
SWIFT_PROTOCOL("_TtP11WILLDevices16InkDeviceService_")
@protocol InkDeviceService
/// Indicates if the current service has been started
///
/// returns:
/// True is the service is running
- (BOOL)started SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol that describes a file transfer service as provided by an InkDevice
SWIFT_PROTOCOL("_TtP11WILLDevices18FileTranserService_")
@protocol FileTranserService <FileDataProvider, InkDeviceService>
/// This transform will be applied to points in the file. Note: This will not be applied to raw points
@property (nonatomic) CGAffineTransform transform;
/// Start the file transfer service and switch the device into the correct mode where required
/// \param provideRawData Specifies if raw data should be provided as part of the ink document structure
///
///
/// throws:
/// If the device is unable to provide data or in the case of a license issue, and exception will be thrown
- (BOOL)startWithProvideRawData:(BOOL)provideRawData error:(NSError * _Nullable * _Nullable)error;
/// Stops the file transfer service and switches the device back to standard mode where applicable
- (BOOL)endAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

@class NSError;
enum InkDeviceServiceType : NSInteger;

/// Reprensents a digital ink device
SWIFT_PROTOCOL("_TtP11WILLDevices9InkDevice_")
@protocol InkDevice
/// Gets a device property
/// \param propertyName The name of the property to get
///
/// \param completionHandler In the case of sucess, the value of the porperty will be returned in the value field, otherwise error details will be returned
///
///
/// throws:
/// If there is a license or device error, an exception will be thrown
- (BOOL)getPropertyAsync:(NSString * _Nonnull)propertyName error:(NSError * _Nullable * _Nullable)error completionHandler:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completionHandler;
/// Sets a device property
/// \param propertyName The name of the property to sert
///
/// \param value The value to set to the property
///
/// \param completionHandler In the case of an error, this will be returned as the error field of the handlers
///
///
/// throws:
/// If there is a device or license error, an exception will be thrown
- (BOOL)setPropertyAsync:(NSString * _Nonnull)propertyName value:(id _Nonnull)value error:(NSError * _Nullable * _Nullable)error completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Gets a device service from the specified service ID such as file transfer or real time ink
/// \param serviceID The service type
///
///
/// throws:
/// If the service is not supported by the device, then an exception will be thrown
///
/// returns:
/// A object that represents the requested service
- (id <InkDeviceService> _Nullable)getService:(enum InkDeviceServiceType)serviceID error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Closes the device
- (void)close;
/// Gets the user acrion taht is currently expeceted by the component or the device
@property (nonatomic, readonly) enum DeviceStatus deviceStatus;
/// This block will be called when a device changes it status. The current and prev
@property (nonatomic, copy) void (^ _Nullable deviceStatusChanged)(enum DeviceStatus, enum DeviceStatus);
/// This block will be called when a battery change event is received from the device indicating current charge level and charging status (true if currently being charged)
@property (nonatomic, copy) void (^ _Nullable deviceBatteryStateChanged)(NSInteger, BOOL);
/// This block will be called when the device sends a barcode event
@property (nonatomic, copy) void (^ _Nullable barcodeScanned)(NSString * _Nonnull);
/// This block will be called when the device sends a button press event
@property (nonatomic, copy) void (^ _Nullable buttonPressed)(void);
/// This block will be called when a deivce has been disconnected
@property (nonatomic, copy) void (^ _Nullable deviceDisconnected)(void);
@end

/// Different buzzer effects that are available on supported ink devices
/// <ul>
///   <li>
///     none: No sound effect will be applied in the case of alert
///   </li>
///   <li>
///     effectOne: Effect 1 will be applied in the case of alert
///   </li>
///   <li>
///     effectTwo: Effect 2 will be applied in the case of alert
///   </li>
///   <li>
///     effectThree: Effect 3 will be applied in the case of alert
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, InkDeviceBuzzerTone) {
  InkDeviceBuzzerToneNone = 0,
  InkDeviceBuzzerToneEffectOne = 1,
  InkDeviceBuzzerToneEffectTwo = 2,
  InkDeviceBuzzerToneEffectThree = 3,
};


/// InkDeviceInfo describes the details of a digital inking device that has been discovered. This information can then be used to
/// connect and interact with the <code>InkDevice</code> via the <code>InkDeviceManager</code> <code>connectToDevice(_:appID:deviceStatusChangedHandler:)</code> method
SWIFT_CLASS("_TtC11WILLDevices13InkDeviceInfo")
@interface InkDeviceInfo : NSObject
/// The friendly name of the device, e.g. “My Bamboo Slate”
@property (nonatomic, copy) NSString * _Nonnull name;
/// The connection ID for the device. This is the UUID of the device as returned by CoreBluetooth
@property (nonatomic, copy) NSString * _Nonnull deviceID;
/// The device type
@property (nonatomic) enum DeviceType type;
/// The time the device was discovered
@property (nonatomic, copy) NSDate * _Nonnull discovered;
/// A human readable description of the discovered device
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol InkDeviceManagerDelegate;

/// The <code>InkDeviceManager</code> enables connections to ink capture devices. The manager also allows the application
/// to register to receive device connection and disconnection events. Details about the last device that has
/// been connected to the system and details about currently connected devices can also be retreived from this
/// class.
SWIFT_CLASS("_TtC11WILLDevices16InkDeviceManager")
@interface InkDeviceManager : NSObject
/// Creates a new instance of a digital ink device and initilizes it with the specified connection information.
/// Note that the device status changed handler provided in this call will automatically be assigned to the
/// device status change block within the InkDevice object in the case of successful construction.
/// \param info The device connection information
///
/// \param deviceStatusChangedHandler A handler that is used to communicate requests generated from the device curing connection
///
///
/// throws:
/// In the case of connection errors, an exception will be thrown
///
/// returns:
/// On completion a new instance that implements the InkDevice protocol
+ (id <InkDevice> _Nullable)connectToDevice:(InkDeviceInfo * _Nonnull)info appID:(NSString * _Nonnull)appID error:(NSError * _Nullable * _Nullable)error deviceStatusChangedHandler:(void (^ _Nonnull)(enum DeviceStatus, enum DeviceStatus))deviceStatusChangedHandler SWIFT_WARN_UNUSED_RESULT;
/// Register a new <code>InkDeviceManagerDelegate</code> to receive connection and disconnect events from the InkDeviceManager
/// \param delegate The delegate that should receive the devices
///
+ (void)registerForEvents:(id <InkDeviceManagerDelegate> _Nonnull)delegate;
/// Removes a <code>InkDeviceManagerDelegate</code> from the connection and disconnection events from the InkDeviceManager
/// \param delegate The delegate to remove from the list
///
+ (void)unregisterForEvents:(id <InkDeviceManagerDelegate> _Nonnull)delegate;
/// Attempt to reconnect to the last device that was paried. On sucess, this connection event will be reported via the delegate
+ (void)reconnectLastPairedDevice;
/// Get the <code>InkDeviceInfo</code> structure for the last device that was connected to the manager. This data is stored
/// in UserDefaults so it will be retained between sessions.
///
/// returns:
/// The <code>InkDeviceInfo</code> that describes the last connected device, or nil if no device has been stored
+ (InkDeviceInfo * _Nullable)lastConnectedDeviceInfo SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of devices that are currentlt connected to the <code>InkDeviceManager</code>
///
/// returns:
/// The list of connected devices
+ (NSArray<InkDeviceInfo *> * _Nonnull)connectedInkDevices SWIFT_WARN_UNUSED_RESULT;
/// Hide the default constructor
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This protocol defines methods that are called by the InkDeviceManager to clients that register themselves us
SWIFT_PROTOCOL("_TtP11WILLDevices24InkDeviceManagerDelegate_")
@protocol InkDeviceManagerDelegate
/// This is called when an <code>InkDevice</code> connects to the manager
/// \param deviceInfo The <code>InkDeviceInfo</code> object that describes the device. This can be used to connect to
/// the device to gain access to the device services
///
- (void)deviceConnected:(InkDeviceInfo * _Nonnull)deviceInfo;
/// This is called when an <code>InkDevice</code> disconnects from the manager
/// \param deviceInfo The <code>InkDeviceInfo</code> object describing the device that has been disconnected
///
- (void)deviceDisconnected:(InkDeviceInfo * _Nonnull)deviceInfo;
@end


/// Specifies the supported serivces that can be provided by an InkDevice
/// <ul>
///   <li>
///     FileTransfer: File transfer service for receiving saved files from an InkDevice
///   </li>
///   <li>
///     RealtimeInk: Real-time ink service for receiving live stroke data from an smartpad InkDevice
///   </li>
///   <li>
///     TouchInk: ink service for receiving stroke data from touch based ink devices
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, InkDeviceServiceType) {
  InkDeviceServiceTypeFileTransfer = 0,
  InkDeviceServiceTypeRealtimeInk = 1,
  InkDeviceServiceTypeTouchInk = 2,
};

@protocol InkDeviceWatcherDelegate;

/// The <code>InkDeviceWatcher</code> class monitors the device and reports when a new ink capture device is available
/// for use. When a device becomes available or becomes unavailable, the <code>InkDeviceInfo</code> is reported to the
/// <code>InkDeviceWatcherDelegate</code> delegate object.
SWIFT_CLASS("_TtC11WILLDevices16InkDeviceWatcher")
@interface InkDeviceWatcher : NSObject
/// Register a delegate to receive device discovery events
@property (nonatomic, strong) id <InkDeviceWatcherDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Start scanning for devices
- (void)start;
/// Stop scanning for devices
- (void)stop;
/// Stops scanning, clears out all cached objects and paired devices
- (void)reset;
@end




/// This protocol defines the delegate methods that are called when a deivce is discovered by the InkDeviceWwatcher
SWIFT_PROTOCOL("_TtP11WILLDevices24InkDeviceWatcherDelegate_")
@protocol InkDeviceWatcherDelegate
/// This is called when a new device is discovered by the InkDeviceWatcher. The returned device infomation
/// can be used with the InkDeviceFactory to connect to the discovered device
/// \param watcher The inkwatcher instance that discovered the device
///
/// \param device A strucutre that decribes the discovered device
///
- (void)deviceAdded:(InkDeviceWatcher * _Nonnull)watcher device:(InkDeviceInfo * _Nonnull)device;
/// This is called when a previously discovered device is no longer visible to the InkDeviceWatcher.
/// \param watcher The inkwacther instance that discovered the device
///
/// \param device A structure that describes the discovered device
///
- (void)deviceRemoved:(InkDeviceWatcher * _Nonnull)watcher device:(InkDeviceInfo * _Nonnull)device;
@end

typedef SWIFT_ENUM(uint8_t, OperationalState) {
  OperationalStateRealtime = 0,
  OperationalStateFileTransfer = 1,
  OperationalStateReady = 2,
};

@protocol StrokeDataReceiver;
@class UIView;

/// Describes someting that generates or provides stroke data
SWIFT_PROTOCOL("_TtP11WILLDevices18StrokeDataProvider_")
@protocol StrokeDataProvider
/// The delegate that will receive the stroke data produced by this provider
@property (nonatomic, strong) id <StrokeDataReceiver> _Nullable dataReceiver;
/// Does this provider also generate points when the input device is not in contact with the device surface
@property (nonatomic, readonly) BOOL generatesHoverPoints;
/// If this is a device that interacts with the screen, this should be set to the view that is to be used for data capture
@property (nonatomic, strong) UIView * _Nullable inputView;
@end


/// Protocol that describes a real time ink service as provided by an InkDevice
SWIFT_PROTOCOL("_TtP11WILLDevices18RealTimeInkService_")
@protocol RealTimeInkService <InkDeviceService, StrokeDataProvider>
/// This transform will be applied to points received from a device before the points are passed into WILL. Note: This will not ne applied to raw points
@property (nonatomic) CGAffineTransform transform;
/// Start the real time ink service and switch the device into the correct mode where required
/// \param provideRawData Specifies if raw data should be provided alongside the stroke data
///
///
/// throws:
/// If the device is unable to provide data or in the case of a license issue, and exception will be thrown
- (BOOL)startWithProvideRawData:(BOOL)provideRawData error:(NSError * _Nullable * _Nullable)error;
/// Stops the real time ink service and switches the device back to standard mode where applicable
- (BOOL)endAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


SWIFT_CLASS("_TtC11WILLDevices14SmartpadDevice")
@interface SmartpadDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11WILLDevices12SmartpadFile")
@interface SmartpadFile : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol SmartpadRealtimeDelegate;
@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;

SWIFT_CLASS("_TtC11WILLDevices15SmartpadManager")
@interface SmartpadManager : NSObject <CBCentralManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SmartpadManager * _Nonnull sharedInstance;)
+ (SmartpadManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <SmartpadRealtimeDelegate> _Nullable realtimeDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Establishes a local connection with the last paired smartpad.
/// If a local connection to a smartpad is successfully established, a notification for <code>kDeviceConnectedNotification</code>.
/// If the connection attempt fails, a notification for <code>DeviceFailedToConnectNotification</code> will be posted instead.
/// Attempts to connect to a smartpad do not time out. To explicitly cancel a pending connection to a smartpad, call the <code>disocnnectDevice()</code> method.
/// This method cannot be used while scanning is in progress.
- (void)connectPairedDevice;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
@end

@class StrokePoint;

SWIFT_PROTOCOL("_TtP11WILLDevices24SmartpadRealtimeDelegate_")
@protocol SmartpadRealtimeDelegate
@optional
- (void)realtimeStrokeBegan:(StrokePoint * _Nonnull)strokePoint;
- (void)realtimeStrokeMoved:(StrokePoint * _Nonnull)strokePoint;
- (void)realtimeStrokeEnded:(StrokePoint * _Nonnull)strokePoint;
- (void)realtimeHoverPointMoved:(StrokePoint * _Nonnull)strokePoint;
- (void)realtimePointsLostWithCount:(NSInteger)count;
- (void)realtimeNewLayerAdded;
- (void)didReceiveRealtimeToolInfoWithPenID:(NSData * _Nonnull)penID penType:(uint8_t)penType;
@end


SWIFT_CLASS("_TtC11WILLDevices6Stroke")
@interface Stroke : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@class UIColor;
@class WCMFloatVector;
@class InkStroke;
@class RawPoint;

/// Delegate definition to receive stroke data
SWIFT_PROTOCOL("_TtP11WILLDevices18StrokeDataReceiver_")
@protocol StrokeDataReceiver
/// A new ink stroke has started on the <code>InkDevice</code>
/// \param penID The ID of the input device that is being used to create the stroke if supported.This will be 0 if input device doesn’t set an ID
///
/// \param inputDeviceType The type of tool that is being used to draw the ink on the device
///
/// \param inkColor The color that should be used to render the ink
///
/// \param pathChunk The final chunk of the path to be appeneded to the current stroke
///
- (void)strokeBeganWithPenID:(NSData * _Nonnull)penID inputDeviceType:(enum ToolType)inputDeviceType inkColor:(UIColor * _Nonnull)inkColor pathChunk:(WCMFloatVector * _Nonnull)pathChunk;
/// An inkstroke has continued on the device, with the input device in contact with the device
/// \param pathChunk The WILL Path chunk to append to the current stroke
///
- (void)strokeMovedWithPathChunk:(WCMFloatVector * _Nonnull)pathChunk;
/// An inkstroke has ended
/// \param pathChunk The final chunk of the path to be appeneded to the current stroke
///
/// \param inkStroke The data structure that represents the whole stroke. If the device has been set to generate raw points, this will also contain the raw data
///
/// \param cancelled If this is true, the stroke was cancelled before it was completed
///
- (void)strokeEndedWithPathChunk:(WCMFloatVector * _Nullable)pathChunk inkStroke:(InkStroke * _Nonnull)inkStroke cancelled:(BOOL)cancelled;
/// If the device supports non-contact points, this will be called when an ‘hover’ stroke has been recevied. A hover stroke will begin
/// when either a pen comes into proximity or the pen is lifted from the inking surface. A hover stroke ends when the pen goes out of
/// proximity or the pen is placed into contact with the input device
/// \param path The InkStroke that contains the hover points
///
- (void)hoverStrokeReceivedWithPath:(NSArray<RawPoint *> * _Nonnull)path;
/// A number of points have been reported as lost by the device during realtime capture
/// \param count The number of points lost
///
- (void)pointsLostWithCount:(NSInteger)count;
/// A new layer of ink strokes has been started
- (void)newLayerAdded;
@end


SWIFT_CLASS("_TtC11WILLDevices11StrokeGroup")
@interface StrokeGroup : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11WILLDevices11StrokePoint")
@interface StrokePoint : NSObject
/// The x-coordinate of the point.
@property (nonatomic, readonly) uint16_t x;
/// The y-coordinate of the point.
@property (nonatomic, readonly) uint16_t y;
/// The pressure of the point
@property (nonatomic) uint16_t pressure;
/// A timestamp indicating the creation time of the point
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// Returns a <code>Boolean</code> value that indicates whether a given point is equal to the receiver
- (BOOL)isEqualTo:(StrokePoint * _Nullable)strokePoint SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithX:(uint16_t)x y:(uint16_t)y pressure:(uint16_t)pressure timestamp:(NSTimeInterval)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
